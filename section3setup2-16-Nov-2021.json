{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of lab 4 magnet analysis.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "HRiBMPFEl96u",
        "cellView": "form"
      },
      "source": [
        "#@title $\\gets$ Run Me First (I have the code setup and function definitions)\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import scipy.optimize\n",
        "from bisect import bisect_left, bisect_right\n",
        "import os, glob\n",
        "import itertools,operator\n",
        "from timeit import default_timer as timer\n",
        "from enum import Enum\n",
        "import json\n",
        "\n",
        "gaccel = 9.802\n",
        "\n",
        "MAJAXIS = 0\n",
        "MINAXIS = 1\n",
        "THETA = 2\n",
        "DPHI = 3\n",
        "MAGROT = 4\n",
        "MAGROTRATE =5\n",
        "\n",
        "\n",
        "\n",
        "class emptystruct:\n",
        "  pass\n",
        "\n",
        "def findAngleFiles (startdir):\n",
        "  #(angleFiles,magFiles) = findSlopeAndAmplitudeFiles(startdir)\n",
        "  # input stardir: path to directory containing experiments\n",
        "  # output: list of paths to angle files\n",
        "  # output slopeFiles: dictionary with paths to slope files, key names are taken from directories under large bob\n",
        "  #   e.g. if large bob has a directory 2mm, then\n",
        "  #   slopeFiles[\"2mm\"] is a list of paths to all slope files (end _slope.txt) \n",
        "  #   under this directory, even in subdirectories\n",
        "  # output amplitudeFiles: same as slopeFiles, but paths to all files ending _angle.txt\n",
        "  #https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python\n",
        "  #https://www.kite.com/python/answers/how-to-search-for-specific-files-in-subdirectories-in-python\n",
        "  \n",
        "    return sorted(glob.glob(startdir + '/**/*_angle.txt'))\n",
        "def rreplace(s, old, new, occurrence):\n",
        "  #replace last instance https://stackoverflow.com/questions/2556108/rreplace-how-to-replace-the-last-occurrence-of-an-expression-in-a-string/59082116#59082116\n",
        "  li = s.rsplit(old, occurrence)\n",
        "  return new.join(li)\n",
        "\n",
        "# needed to check data validity\n",
        "# returns the indices of the first and last element of the largest sequence of true in a list of booleans\n",
        "def longestTrueSequence(seq):\n",
        "  #adapted from https://stackoverflow.com/questions/40166522/find-longest-sequence-of-0s-in-the-integer-list\n",
        "  r = max((list(y) for (x,y) in itertools.groupby((enumerate(seq)),operator.itemgetter(1)) if x), key=len)\n",
        "  return (r[0][0], r[-1][0])\n",
        "\n",
        "# Checking data validity (no missed swings, dt reasonable)\n",
        "# returns longest sequence of valid data\n",
        "def timeCheck(time,number):\n",
        "  dt = np.diff(time)\n",
        "  dn = np.diff(number)%256 #number is mod 256\n",
        "  maxperiod = 5 #equivalent to 6 meter pendulum\n",
        "  valid = (dt > 0) & (dt < maxperiod) & (dn==2)\n",
        "  (start,stop) = longestTrueSequence(valid)\n",
        "  return (start,stop)\n",
        "  \n",
        "\n",
        "def loadAndParseData (angleFilePath, z0=1, scale=None, max_rows=450000): #450k readings = 1500s\n",
        "  magFilePath = rreplace(angleFilePath, 'angle', 'mag',1)\n",
        "  tcross, theta, majaxis, minaxis, number = np.loadtxt(angleFilePath, skiprows = 1, unpack = True)\n",
        "  (start,stop) = timeCheck(tcross, number)\n",
        "  tcross = tcross[start:stop+1]\n",
        "  theta = theta[start:stop+1]\n",
        "  majaxis = majaxis[start:stop+1]\n",
        "  minaxis = minaxis[start:stop+1]\n",
        "  period = np.mean(np.diff(tcross))\n",
        "\n",
        "  fixedParams = emptystruct()\n",
        "  fixedParams.z0 = z0\n",
        "  fixedParams.L = gaccel*(0.5*period/np.pi)**2\n",
        "\n",
        "  experiment = emptystruct()\n",
        "  experiment.anglePath = angleFilePath\n",
        "  experiment.magPath = magFilePath\n",
        "  experiment.period = period\n",
        "  experiment.skip = 1\n",
        "  \n",
        "\n",
        "  xinit = []\n",
        "  experiment.phi = []\n",
        "  experiment.b = []\n",
        "\n",
        "\n",
        "  tmag, magX, magY, magZ = np.loadtxt(magFilePath, skiprows = 1, unpack = True, max_rows=max_rows)\n",
        "\n",
        "  b0 = []\n",
        "\n",
        "  if scale is None:\n",
        "    scale = z0\n",
        "\n",
        "  for i in range(len(tcross)-1):\n",
        "    if (majaxis[i]) < 0:\n",
        "      majaxis[i] = -majaxis[i]\n",
        "      minaxis[i] = -minaxis[i]\n",
        "    start = bisect_left(tmag, tcross[i])\n",
        "    stop = bisect_right(tmag, tcross[i+1])\n",
        "    if (stop>=len(tmag)):\n",
        "      break    \n",
        "    xinit.append((majaxis[i]*scale, minaxis[i]*scale, np.mod(np.deg2rad(theta[i]), 2*np.pi), 0, 0, 0)) #a, b, theta, dphi, tiltrot0, tiltrotrate\n",
        "    experiment.phi.append(2*np.pi*(tmag[start:stop] - tcross[i]) / (tcross[i+1]-tcross[i]) )\n",
        "    experiment.b.append((magX[start:stop], magY[start:stop], magZ[start:stop]))\n",
        "    b0.append(np.sign(magZ[start])*np.max(np.sqrt(magZ[start:stop]**2 + magX[start:stop]**2 + magY[start:stop]**2)))\n",
        "\n",
        "  experiment.tcross = tcross[0:len(experiment.phi)]\n",
        "\n",
        "  fixedParams.B0 = np.mean(b0)\n",
        "  experiment.fixedParams = fixedParams\n",
        "  experiment.offsetInit = (0.0,0.0)\n",
        "  experiment.tiltAngleInit = 0.0\n",
        "  experiment.orbitParametersInit = np.array(xinit)\n",
        "\n",
        "  experiment.orbitParameters = np.copy(experiment.orbitParametersInit)\n",
        "  experiment.offset = (0.0,0.0)\n",
        "  experiment.tiltAngle = 0.0\n",
        "\n",
        "  experiment.axisWeight = [1.0,1.0,1.0]\n",
        "\n",
        "  alignTheta(experiment)\n",
        "  calculateB0(experiment)\n",
        "\n",
        "  plt.figure()\n",
        "\n",
        "  experiment.fitCompleted = False\n",
        "\n",
        "  return experiment\n",
        "\n",
        "def calculateB0(experiment):\n",
        "  result = scipy.optimize.minimize(lambda x : bscaleObjective(x, experiment), 1, bounds=[(0.1, 10)],options={\"maxiter\":1000,\"disp\":False})\n",
        "  experiment.fixedParams.B0 = experiment.fixedParams.B0*result.x[0]\n",
        "\n",
        "def bscaleObjective(x, experiment):\n",
        "  sqerr = 0\n",
        "  for i in range(len(experiment.phi)):\n",
        "    bf = bfieldOneOrbit([],experiment,i,[])*x\n",
        "    deltabs = (bf - np.asarray(experiment.b[i])[:,::experiment.skip])**2\n",
        "    for j in range(3):\n",
        "      sqerr = sqerr + np.sum(deltabs[j,:]*experiment.axisWeight[j])\n",
        "  return sqerr\n",
        "\n",
        "def rmsError(experiment):\n",
        "  skip = experiment.skip\n",
        "  experiment.skip = 1\n",
        "  sqerr = bscaleObjective(1,experiment)\n",
        "  nelem = 0\n",
        "  for p in experiment.phi:\n",
        "    nelem = nelem + len(p)\n",
        "  experiment.skip = skip\n",
        "  return np.sqrt(sqerr/(3*nelem))\n",
        "\n",
        "#predicted b, measured b, measured - predicted, sum square error\n",
        "def bfieldAndResidualFromExperiment(experiment, ind, initial=False):\n",
        "  if initial:\n",
        "    orbit = experiment.orbitParametersInit[ind,:]\n",
        "    bfield = bfieldOneOrbit(orbit, experiment, ind, np.arange(6))\n",
        "  else:\n",
        "    bfield = bfieldOneOrbit([], experiment, ind, [])\n",
        "  be = np.asarray(experiment.b[ind])[:,::experiment.skip]\n",
        "  res =  be - bfield\n",
        "  resnorm = np.sum(res**2)\n",
        "  return (bfield, be, res, resnorm)\n",
        "\n",
        "def alignTheta(experiment):\n",
        "  for i in range(len(experiment.phi)):\n",
        "    b = experiment.b[i]\n",
        "    ip = np.copy(experiment.orbitParametersInit[i,:])\n",
        "    bi1 = bfieldOneOrbit(ip, experiment, i, np.arange(6))\n",
        "    ip[THETA] = np.mod(ip[THETA]+np.pi, 2*np.pi)\n",
        "    bi2 = bfieldOneOrbit(ip, experiment, i, np.arange(6))\n",
        "    if (np.sum((bi2-b)**2) < np.sum((bi1-b)**2)):\n",
        "      experiment.orbitParametersInit[i,THETA] = ip[THETA]\n",
        "\n",
        "    theta = experiment.orbitParameters[i,THETA]\n",
        "    b1 = bfieldOneOrbit(theta, experiment, i, THETA)\n",
        "    b2 = bfieldOneOrbit(theta + np.pi, experiment, i, THETA)\n",
        "    if (np.sum((b2-b)**2) < np.sum((b1-b)**2)):\n",
        "      experiment.orbitParameters[i,THETA] = np.mod(theta + np.pi, 2*np.pi)\n",
        "\n",
        "\n",
        "def dipole_bfield(b0,x,y,dz, z0, tx, ty):\n",
        "  #field at 0,0,0 if magnet is located at x,y,dz + z0, and tilted from z direction by tx and ty, assuming tx and ty are small \n",
        "  #b0 is z-field when magnet is at 0,0,z0 and tx,ty = 0\n",
        "  #b = u0/4pi r^5 |m|(3 r*(r dot mhat) - r^2 mhat) (wiki magnetic dipole)\n",
        "\n",
        "  x = x/z0\n",
        "  y = y/z0\n",
        "  z = (1 + dz/z0)\n",
        "  rs = x**2 + y**2 + z**2\n",
        "  r5 = np.power(rs,2.5)\n",
        "  mhatz = (1-0.5*tx**2-0.5*ty**2)\n",
        "  mdotr = -x*tx - y*ty - z*mhatz\n",
        "  return b0/(2*r5)*(-3*x*mdotr - tx*rs, -3*y*mdotr - ty*rs, -3*z*mdotr - rs*mhatz)\n",
        "\n",
        "def ellipticalOrbit(phi,a,b,theta,L):\n",
        "  u = a*np.sin(phi)\n",
        "  v = -b*np.cos(phi)\n",
        "  x = u*np.cos(theta) - v*np.sin(theta)\n",
        "  y = u*np.sin(theta) + v*np.cos(theta)\n",
        "  dz = L - np.sqrt(L**2 - u**2 - v**2)\n",
        "  tx = -x/L\n",
        "  ty = -y/L\n",
        "  return(x,y,dz,tx,ty)\n",
        "\n",
        "def ellipticalMagField(phi, a, b, theta, tiltRot0, tiltRotRate, dphi, offset, tiltAngle, fixedParams):\n",
        "  mp = np.mean(phi)\n",
        "  tiltx = tiltAngle*np.cos(tiltRot0 + tiltRotRate*(phi-mp))\n",
        "  tilty = tiltAngle*np.sin(tiltRot0 + tiltRotRate*(phi-mp))\n",
        "  (x,y,dz,tx,ty) = ellipticalOrbit(phi + dphi,a,b,theta, fixedParams.L)\n",
        "  return dipole_bfield(fixedParams.B0, x + offset[0], y + offset[1], dz, fixedParams.z0, tx + tiltx, ty + tilty)\n",
        "\n",
        "\n",
        "def extractGlobalParametersFromVec(x):\n",
        "  return (x[3:], x[0:2], x[2])\n",
        "\n",
        "def getParametersFromVec(x,nparams=6,offset=None,tiltAngle=None):\n",
        "  if (offset is None):\n",
        "    (x, offset, tiltAngle) = extractGlobalParametersFromVec(x)\n",
        "  if nparams > 0:\n",
        "    orbit = np.reshape(x,(-1,nparams))\n",
        "  else:\n",
        "    orbit = []\n",
        "  return(offset, tiltAngle, orbit)\n",
        " \n",
        "def getParametersFromOrbit(orbit):\n",
        "  #a, b, theta, dphi, tiltrot0, tiltrotrate\n",
        "  orbit = np.atleast_2d(orbit)\n",
        "  a = orbit[:,0]\n",
        "  b = orbit[:,1]\n",
        "  theta = orbit[:,2]\n",
        "  dphi = orbit[:,3]\n",
        "  if np.shape(orbit)[1] >= 5:\n",
        "    tiltRot0 = orbit[:,4]\n",
        "  else:\n",
        "    tiltRot0 = 0.0*a\n",
        "  if np.shape(orbit)[1] >= 6:\n",
        "    tiltRotRate = orbit[:,5]\n",
        "  else:\n",
        "    tiltRotRate = 0.0*a\n",
        "  return (a, b ,theta, dphi, tiltRot0, tiltRotRate)\n",
        "\n",
        "def getVectorFromParameters(offset, tiltAngle, orbit):\n",
        "  gv = np.full(3,tiltAngle, 'float64')\n",
        "  gv[0:2] = offset\n",
        "  return np.concatenate((gv,np.ravel(orbit)))\n",
        "\n",
        "\n",
        "def bfieldFromParamVecAndExperiment(x, experiment,inds,paraminds,offset=None,tiltAngle=None,fitspin=False):\n",
        "  if inds is None:\n",
        "    inds = np.arange(len(experiment.phi))\n",
        "  if paraminds is None:\n",
        "    paraminds = np.arange(6)\n",
        "  \n",
        "  (offset, tiltAngle, orbitParams) = getParametersFromVec(x,len(paraminds),offset,tiltAngle)\n",
        "  orbit = experiment.orbitParameters[inds,:]\n",
        "  orbit[:,paraminds] = orbitParams\n",
        "  (a, b ,theta, dphi, tiltRot0, tiltRotRate) = getParametersFromOrbit(orbit)\n",
        "  bfield = []\n",
        "  for i in range(len(a)):\n",
        "    #ellipticalMagField(phi, a, b, theta, tiltRot0, tiltRotRate, dphi, offset, tiltAngle, fixedParams):\n",
        "    bfield.append(ellipticalMagField(np.asarray(experiment.phi[inds[i]])[0::experiment.skip], a[i], b[i], theta[i], tiltRot0[i], tiltRotRate[i], dphi[i], offset, tiltAngle, experiment.fixedParams))\n",
        "  return bfield\n",
        "\n",
        "\n",
        "\n",
        "def bfieldOneOrbit(orbitParams, experiment, index, paraminds):\n",
        "  orbit = np.copy(experiment.orbitParameters[index,:])\n",
        "  orbit[paraminds] = orbitParams\n",
        "  (a, b ,theta, dphi, tiltRot0, tiltRotRate) = getParametersFromOrbit(orbit)\n",
        "  return ellipticalMagField(np.asarray(experiment.phi[index])[0::experiment.skip], a, b, theta, tiltRot0, tiltRotRate, dphi, experiment.offset, experiment.tiltAngle, experiment.fixedParams)\n",
        "\n",
        "def bfieldOneOrbitTiltAdj(experiment, index, tiltAngle, tiltRotation, tiltRotRate):\n",
        "  (a, b ,theta, dphi, *_) = getParametersFromOrbit(experiment.orbitParameters[index,:])\n",
        "  return ellipticalMagField(np.asarray(experiment.phi[index])[0::experiment.skip], a, b, theta, tiltRotation, tiltRotRate, dphi, experiment.offset, tiltAngle, experiment.fixedParams)\n",
        "\n",
        "\n",
        "def fitterObjectiveTiltOrbit(x, experiment, index):\n",
        "  tiltAngle = x[0]\n",
        "  tiltRotation = x[1]\n",
        "  if (len(x)>=3):\n",
        "    tiltRotRate = x[2]\n",
        "  else:\n",
        "    tiltRotRate = 0\n",
        "  \n",
        "  bfield = bfieldOneOrbitTiltAdj(experiment, index, tiltAngle, tiltRotation, tiltRotRate)\n",
        "  deltabs = (bfield - np.asarray(experiment.b[index])[:,::experiment.skip])**2\n",
        "  sqerr = 0\n",
        "  for j in range(3):\n",
        "    sqerr = sqerr + np.sum(deltabs[j,:]*experiment.axisWeight[j])\n",
        "  return sqerr\n",
        "\n",
        "\n",
        "\n",
        "def fitterObjectiveOrbit(x,experiment,index, paraminds):\n",
        "  bfield = bfieldOneOrbit(x, experiment, index, paraminds)\n",
        "  deltabs = (bfield - np.asarray(experiment.b[index])[:,::experiment.skip])**2\n",
        "  sqerr = 0\n",
        "  for j in range(3):\n",
        "    sqerr = sqerr + np.sum(deltabs[j,:]*experiment.axisWeight[j])\n",
        "  return sqerr\n",
        "\n",
        "def fitterObjectiveFunction (x, experiment, inds, paraminds):\n",
        "  bfield = bfieldFromParamVecAndExperiment (x, experiment, inds, paraminds)\n",
        "  sqerr = 0\n",
        "  for i in range(len(bfield)): \n",
        "    deltabs = (bfield[i] - np.asarray(experiment.b[inds[i]])[:,::experiment.skip])**2\n",
        "    for j in range(3):\n",
        "      sqerr = sqerr + np.sum(deltabs[j,:]*experiment.axisWeight[j])\n",
        "  return sqerr\n",
        "\n",
        "\n",
        "\n",
        "def getBounds(xinit, paraminds):\n",
        "  \n",
        "  offsetmin = (-0.01,-0.01)\n",
        "  offsetmax = (0.01,0.01)\n",
        "  tiltAngleMin = 0\n",
        "  tiltAngleMax = np.deg2rad(10)\n",
        "\n",
        "  (offset, tilt, orbit) = getParametersFromVec(xinit,len(paraminds))\n",
        "\n",
        "  upper = (0.3, 0.1, 2*np.pi+0.1, 0.1, 2*np.pi+0.1, 2)\n",
        "  lower = (0, -0.1, -0.1, -0.1, -0.1, -2)\n",
        "  if np.size(orbit) == 0:\n",
        "    minp = []\n",
        "    maxp = [] \n",
        "  else:\n",
        "    maxp = orbit*0.0\n",
        "    minp = orbit*0.0\n",
        "    for i in range(len(paraminds)):\n",
        "      maxp[:,i] = upper[paraminds[i]]\n",
        "      minp[:,i] = lower[paraminds[i]]\n",
        "\n",
        "\n",
        "  lb = getVectorFromParameters(offsetmin, tiltAngleMin, minp)\n",
        "  ub = getVectorFromParameters(offsetmax, tiltAngleMax, maxp)\n",
        "  return np.transpose((lb,ub))\n",
        "\n",
        "def fitGlobal(experiment, inds=None, paraminds=[]):\n",
        "\n",
        "  paraminds = np.atleast_1d(paraminds)\n",
        "  if (np.size(paraminds) == 0):\n",
        "    paraminds = []\n",
        "  if inds is None:\n",
        "    inds = np.arange(len(experiment.phi))\n",
        "  xinit = getVectorFromParameters(experiment.offset, experiment.tiltAngle, experiment.orbitParameters[np.ix_(inds,paraminds)])\n",
        "  bounds = getBounds(xinit,paraminds)\n",
        "  \n",
        "  result = scipy.optimize.minimize(lambda x : fitterObjectiveFunction(x, experiment, inds, paraminds), xinit, bounds=bounds,options={\"maxiter\":1000,\"disp\":False})\n",
        "  (experiment.offset, experiment.tiltAngle, orbit) = getParametersFromVec(result.x, len(paraminds))\n",
        "  experiment.orbitParameters[np.ix_(inds,paraminds)] = orbit\n",
        "  return result\n",
        "\n",
        "\n",
        "def fitOrbits(experiment, paraminds=np.arange(6), inds=None):\n",
        "\n",
        "  paraminds = np.atleast_1d(paraminds)\n",
        "  xinit = getVectorFromParameters((0,0),0, np.zeros(len(paraminds)))\n",
        "  bounds = getBounds(xinit, paraminds)\n",
        "  bounds = bounds[3:,:]\n",
        "\n",
        "  rv = []\n",
        "  if inds is None:\n",
        "    inds = range(len(experiment.phi))\n",
        "  for i in inds:\n",
        "    xinit = experiment.orbitParameters[i,paraminds]\n",
        "    result = scipy.optimize.minimize(lambda x : fitterObjectiveOrbit(x,experiment,i,paraminds), xinit, bounds = bounds, options={\"maxiter\":1000,\"disp\":False})\n",
        "    experiment.orbitParameters[i, paraminds] = result.x   \n",
        "    rv.append(result)\n",
        "  #a, b, theta, dphi, tiltrot0, tiltrotrate\n",
        "  experiment.orbitParameters[:,2] = np.mod(experiment.orbitParameters[:,2],2*np.pi)\n",
        "  experiment.orbitParameters[:,4] = np.mod(experiment.orbitParameters[:,4],2*np.pi)\n",
        "  \n",
        "  return rv\n",
        "\n",
        "\n",
        "\n",
        "def fitExperiment(experiment):\n",
        "  if experiment.fitCompleted:\n",
        "    return\n",
        "  plt.figure()\n",
        "  (a, b ,theta,dphi,r,rr) = getParametersFromOrbit(experiment.orbitParameters)\n",
        "  plt.plot(experiment.tcross, np.unwrap(theta)*180/np.pi)\n",
        "  start = timer()\n",
        "  sk = experiment.skip\n",
        "  aw = experiment.axisWeight\n",
        "  experiment.orbitParameters[:,MAGROTRATE] = 0\n",
        "  experiment.skip = 8\n",
        "  experiment.axisWeight = (1,1,1)\n",
        "  experiment.tiltAngle = np.deg2rad(3)\n",
        "  fitOrbits(experiment, (MAGROT))\n",
        "  fitGlobal(experiment)\n",
        "\n",
        "  print(\"B0 initial: {:2f}\".format(experiment.fixedParams.B0))\n",
        "  calculateB0(experiment)\n",
        "  print(\"B0 updated: {:2f}\".format(experiment.fixedParams.B0))\n",
        "  \n",
        "\n",
        "  fitOrbits(experiment, (THETA, MAGROT))\n",
        "\n",
        "  fitGlobal(experiment)\n",
        "  \n",
        "  print('{:2f} s elapsed; initial fit - offset = {} ; tilt = {}'.format(timer()-start, experiment.offset*1000, experiment.tiltAngle*180/np.pi))\n",
        "\n",
        "  fitOrbits(experiment, (MAJAXIS, MINAXIS, THETA, DPHI))\n",
        "  fitGlobal(experiment)\n",
        "\n",
        "  fitOrbits(experiment, (THETA, MAGROT))  \n",
        "\n",
        "  fitGlobal(experiment)\n",
        "\n",
        "  calculateB0(experiment)\n",
        "  print(\"B0 updated: {:2f}\".format(experiment.fixedParams.B0))\n",
        "  fitOrbits(experiment, (MAJAXIS, MINAXIS, THETA, DPHI))\n",
        "  fitGlobal(experiment)\n",
        "\n",
        "  \n",
        "  \n",
        "  print('{:2f} s elapsed; refit orbit dimensions - offset = {} ; tilt = {}'.format(timer()-start, experiment.offset*1000, experiment.tiltAngle*180/np.pi))\n",
        "\n",
        "  tilt = experiment.tiltAngle\n",
        "  for reps in range(10):\n",
        "    fitOrbits(experiment, (THETA, MAGROT))  \n",
        "    fitGlobal(experiment)\n",
        "    dtilt = experiment.tiltAngle-tilt\n",
        "    if (np.abs(dtilt) < np.deg2rad(0.1)):\n",
        "      break\n",
        "    tilt = experiment.tiltAngle\n",
        "  \n",
        "  print('{:2f} s elapsed; iterated fitter completed with dtilt = {} - offset = {} ; tilt = {}'.format(timer()-start, dtilt*180/np.pi, experiment.offset*1000, experiment.tiltAngle*180/np.pi))\n",
        "\n",
        "\n",
        "    \n",
        "\n",
        "  # experiment.axisWeight = (1,1,1)\n",
        "  # inds = np.arange(0,len(experiment.phi),np.ceil(len(experiment.phi)/16),dtype=int) #15 evenly spaced\n",
        "  # paraminds = (THETA, MAGROT)\n",
        "  # fitGlobal(experiment, inds, paraminds)\n",
        "  # print('{:2f} s elapsed; fit offset and tilt with orbit adjustments - offset = {} ; tilt = {}'.format(timer()-start, experiment.offset*1000, experiment.tiltAngle*180/np.pi))\n",
        "  (a, b ,theta,dphi,r,rr) = getParametersFromOrbit(experiment.orbitParameters)\n",
        "  plt.plot(experiment.tcross, np.unwrap(theta)*180/np.pi)\n",
        "\n",
        "  for reps in range(10):\n",
        "    fitOrbits(experiment, (THETA, MAGROT, MAGROTRATE))  \n",
        "    fitGlobal(experiment)\n",
        "    dtilt = experiment.tiltAngle-tilt\n",
        "    if (np.abs(dtilt) < np.deg2rad(0.05)):\n",
        "      break\n",
        "    tilt = experiment.tiltAngle\n",
        "\n",
        "  fitOrbits(experiment, (THETA, MAGROT, MAGROTRATE))\n",
        "  print('{:2f} s elapsed; iterated fitter with spin completed with dtilt = {} - offset = {} ; tilt = {}'.format(timer()-start, dtilt*180/np.pi, experiment.offset*1000, experiment.tiltAngle*180/np.pi))\n",
        "\n",
        "  # experiment.axisWeight = (1,1,0)\n",
        "  # fitOrbits(experiment, (THETA, MAGROT, MAGROTRATE))\n",
        "\n",
        "  # fitGlobal(experiment)\n",
        "  # fitOrbits(experiment, (THETA, MAGROT, MAGROTRATE))\n",
        "\n",
        "  # print('{:2f} s elapsed; added in spin - offset = {} ; tilt = {}'.format(timer()-start, experiment.offset*1000, experiment.tiltAngle*180/np.pi))\n",
        "  (a, b ,theta,dphi,r,rr) = getParametersFromOrbit(experiment.orbitParameters)\n",
        "  plt.plot(experiment.tcross, np.unwrap(theta)*180/np.pi)\n",
        "  plt.legend(('initial','without spin', 'with spin'))\n",
        "  plt.xlabel('time')\n",
        "  plt.ylabel('maj axis angle')\n",
        "  experiment.fitCompleted = True\n",
        "\n",
        "def updateExperiments(startdir, experiments):\n",
        "  plt.rcParams['figure.figsize'] = [8, 5]\n",
        "  angleFiles = findAngleFiles(startdir)\n",
        "  for file in angleFiles:\n",
        "    found = False\n",
        "    for e in experiments:\n",
        "      if os.path.normpath(file) == os.path.normpath(e.anglePath):\n",
        "        found = True\n",
        "    if not(found):\n",
        "      print('loading and fitting: {}'.format(file))\n",
        "      e = loadAndParseData(file, z0)\n",
        "      fitExperiment(e)\n",
        "      experiments.append(e)\n",
        "      print('{}/{} experiments fit'.format(len(experiments), len(angleFiles)))\n",
        "      plt.show()\n",
        "\n",
        "def plotRotationRateExperiments (experiments, delta = 100):\n",
        "  plt.rcParams['figure.figsize'] = [12, 8]\n",
        "  deghr = np.rad2deg(1)*3600\n",
        "  rotf = -15/deghr*np.sin(np.deg2rad(40.730610))\n",
        "  \n",
        "  ratio = []\n",
        "  rate = []\n",
        "\n",
        "  for e in experiments:\n",
        "    (a, b ,theta,dphi,r,rr) = getParametersFromOrbit(e.orbitParameters)\n",
        "    t = e.tcross\n",
        "    numpts = int(np.ceil((t[-1]-t[0])/delta))\n",
        "    inds = np.linspace(0,len(t),numpts, endpoint=False, dtype=int)\n",
        "    ratio.append(np.diff(np.cumsum(a*b)[inds])/np.diff(inds)*np.pi/((e.fixedParams.L**2) * experiments[0].period))\n",
        "    rate.append(np.diff(np.unwrap(theta)[inds])/np.diff(t[inds]))\n",
        "\n",
        "  for i in range(len(ratio)):\n",
        "    plt.plot(ratio[i]*1e6, rate[i]*1e6, marker='.', linestyle='none')\n",
        "\n",
        "  slopepred = .75\n",
        "  ratio_axis = np.linspace(np.min(np.concatenate(ratio)), np.max(np.concatenate(ratio)))\n",
        "\n",
        "  ratepred =  slopepred*ratio_axis\n",
        "  plt.plot(1e6*ratio_axis, 1e6*(ratepred+rotf), 'k-', label='predicted')\n",
        "  plt.ylabel(r'precession rate ($\\mu$rad/s)', fontsize=20)\n",
        "  plt.xlabel(r'$\\frac{\\pi a b}{L^2 T}$ ($\\mu$rad/s)', fontsize=20)  \n",
        "\n",
        "  p = np.polyfit(np.concatenate(ratio), np.concatenate(rate), 1)\n",
        "  plt.plot(1e6*ratio_axis,1e6*(ratio_axis*p[0] + p[1]), 'm--', label='fit')\n",
        "  plt.legend()\n",
        "  print('slope measured, predicted = {:2f},{:2f}'.format(p[0], slopepred))\n",
        "  print('intercept measured, predicted = {:2f},{:2f} deg/hr'.format(p[1]*deghr, rotf*deghr))\n",
        "\n",
        "initialBlockRun = True"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uH4ESYBaNvQv"
      },
      "source": [
        "## run this block once (after you edit values to match your setup)\n",
        "First edit the data values to align with your setup\n",
        "\n",
        "the `experiments = []` line will erase any data you've already loaded, so run this again to start over"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YMrOksDbefDn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "31a6a60e-eb5e-41ed-f31f-ecd25ebadc81"
      },
      "source": [
        "try:\n",
        "  if not(initialBlockRun):\n",
        "    raise\n",
        "except:\n",
        "  print (\"you need to run the code block above first!\")\n",
        "else:  \n",
        "  experiments = []\n",
        "  setupNumber = 2\n",
        "  section =3\n",
        "  date = \"16-Nov-2021\"\n",
        "  angleOfWall = 27.05\n",
        "  z0 = .057  \n",
        "  !git clone https://github.com/NYUExperimentalPhysics1-2021/lab4-individual-data-XU2024 data #change to your github user name - do not erase the \"data\" afterwards\n",
        "  startdir = '/content/data'"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'data'...\n",
            "remote: Enumerating objects: 52, done.\u001b[K\n",
            "remote: Counting objects: 100% (52/52), done.\u001b[K\n",
            "remote: Compressing objects: 100% (50/50), done.\u001b[K\n",
            "remote: Total 52 (delta 4), reused 45 (delta 1), pack-reused 0\u001b[K\n",
            "Unpacking objects: 100% (52/52), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UbYl-kyFh7oz"
      },
      "source": [
        "## Run this block everytime you add data to your github repository\n",
        "1. `!git -C /content/data pull` : load new  data from your github repository \n",
        "\n",
        "2. `updateExperiments(startdir, experiments)` : fit any new data to find angles and orbit parameters: \n",
        "\n",
        "3. `plotRotationRateExperiments(experiments)` : plot all the results on a graph of precession rate vs. $\\frac{\\pi a b}{L^2 T}$. From dimensional analysis, we know the precession per period should be proportional to the ratio of the ellipse area to the length of the string squared. \n",
        "\n",
        "`plotRotationRateExperiments(experiments)` takes an optional agrument which is how many seconds to average over when computing the precession rate and $\\frac{\\pi a b}{L^2 T}$. The default is 100\n",
        "\n",
        "try `plotRotationRateExperiments(experiments,200)` or `plotRotationRateExperiments(experiments,10)`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M8UjZnB5vObl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "86797e2c-3bd9-4074-c68c-98a4e28b6d50"
      },
      "source": [
        "!git -C /content/data pull\n",
        "updateExperiments(startdir, experiments)\n",
        "plotRotationRateExperiments(experiments)\n",
        "for e in experiments:\n",
        "  print('{}: offset = {:.1f}mm, {:.1f}mm \\t tilt = {:.1f} deg \\t B0 = {:.0f} uT\\t rms error = {:.2f} uT'.format(os.path.basename(e.anglePath), 1000*e.offset[0], 1000*e.offset[1], np.rad2deg(e.tiltAngle), e.fixedParams.B0, rmsError(e)))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Already up to date.\n",
            "loading and fitting: /content/data/20211116153600/20211116153600_angle.txt\n",
            "B0 initial: -871.945015\n",
            "B0 updated: -874.757116\n",
            "5.111946 s elapsed; initial fit - offset = [-2.15653785 -0.25007537] ; tilt = 2.334577574976022\n",
            "B0 updated: -889.521725\n",
            "16.796186 s elapsed; refit orbit dimensions - offset = [-2.30803907 -0.32704746] ; tilt = 2.332856497399166\n",
            "19.176234 s elapsed; iterated fitter completed with dtilt = 0.02126993212504148 - offset = [-2.37629235 -0.35653045] ; tilt = 2.3541264295242077\n",
            "28.021258 s elapsed; iterated fitter with spin completed with dtilt = 0.03459271377397764 - offset = [-2.44030997 -0.4429456 ] ; tilt = 2.652353724421302\n",
            "1/5 experiments fit\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loading and fitting: /content/data/20211116160347/20211116160347_angle.txt\n",
            "B0 initial: -893.384896\n",
            "B0 updated: -896.204244\n",
            "4.896806 s elapsed; initial fit - offset = [-2.37444135 -0.27984971] ; tilt = 2.2866136354251174\n",
            "B0 updated: -902.527631\n",
            "16.767604 s elapsed; refit orbit dimensions - offset = [-2.40552596 -0.33660811] ; tilt = 2.3103512071616756\n",
            "19.014512 s elapsed; iterated fitter completed with dtilt = 0.002692932688574343 - offset = [-2.43130768 -0.35959354] ; tilt = 2.31304413985025\n",
            "27.763314 s elapsed; iterated fitter with spin completed with dtilt = 0.04149145118623044 - offset = [-2.45900793 -0.43835832] ; tilt = 2.6839262543297626\n",
            "2/5 experiments fit\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loading and fitting: /content/data/20211116162203/20211116162203_angle.txt\n",
            "B0 initial: -915.414405\n",
            "B0 updated: -918.812684\n",
            "5.803283 s elapsed; initial fit - offset = [-2.14281579 -0.61776123] ; tilt = 2.0014526301533615\n",
            "B0 updated: -919.116452\n",
            "17.946098 s elapsed; refit orbit dimensions - offset = [-2.30741666 -0.48819394] ; tilt = 2.301274568352125\n",
            "20.337694 s elapsed; iterated fitter completed with dtilt = 0.04101326635032833 - offset = [-2.39014862 -0.47794185] ; tilt = 2.3422878347024536\n",
            "29.411275 s elapsed; iterated fitter with spin completed with dtilt = 0.025815617887739374 - offset = [-2.38460785 -0.4956418 ] ; tilt = 2.6742580342831808\n",
            "3/5 experiments fit\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loading and fitting: /content/data/20211116163259/20211116163259_angle.txt\n",
            "B0 initial: -911.152685\n",
            "B0 updated: -916.195467\n",
            "7.999040 s elapsed; initial fit - offset = [-2.198136   -0.40034885] ; tilt = 2.373879362999225\n",
            "B0 updated: -924.226431\n",
            "19.187275 s elapsed; refit orbit dimensions - offset = [-2.43551542 -0.48009054] ; tilt = 2.3431635320154527\n",
            "21.822667 s elapsed; iterated fitter completed with dtilt = -0.0008088687708703858 - offset = [-2.56284452 -0.4885048 ] ; tilt = 2.342354663244582\n",
            "31.080524 s elapsed; iterated fitter with spin completed with dtilt = 0.017125315651748726 - offset = [-2.6447067  -0.52617454] ; tilt = 2.520394649027004\n",
            "4/5 experiments fit\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loading and fitting: /content/data/20211116164624/20211116164624_angle.txt\n",
            "B0 initial: -918.559350\n",
            "B0 updated: -923.996171\n",
            "4.714685 s elapsed; initial fit - offset = [-2.78550666 -0.14551323] ; tilt = 1.895603988611792\n",
            "B0 updated: -935.744755\n",
            "15.490715 s elapsed; refit orbit dimensions - offset = [-2.89962437 -0.23608316] ; tilt = 2.224108996207189\n",
            "17.561713 s elapsed; iterated fitter completed with dtilt = 0.02209300406034528 - offset = [-2.93874849 -0.2552004 ] ; tilt = 2.2462020002675342\n",
            "24.405924 s elapsed; iterated fitter with spin completed with dtilt = 0.01067478484938262 - offset = [-2.97559905 -0.28182941] ; tilt = 2.299884599352848\n",
            "5/5 experiments fit\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "slope measured, predicted = 1.226922,0.750000\n",
            "intercept measured, predicted = -51.122426,-9.787550 deg/hr\n",
            "20211116153600_angle.txt: offset = -2.4mm, -0.4mm \t tilt = 2.7 deg \t B0 = -890 uT\t rms error = 10.68 uT\n",
            "20211116160347_angle.txt: offset = -2.5mm, -0.4mm \t tilt = 2.7 deg \t B0 = -903 uT\t rms error = 10.55 uT\n",
            "20211116162203_angle.txt: offset = -2.4mm, -0.5mm \t tilt = 2.7 deg \t B0 = -919 uT\t rms error = 12.37 uT\n",
            "20211116163259_angle.txt: offset = -2.6mm, -0.5mm \t tilt = 2.5 deg \t B0 = -924 uT\t rms error = 8.92 uT\n",
            "20211116164624_angle.txt: offset = -3.0mm, -0.3mm \t tilt = 2.3 deg \t B0 = -936 uT\t rms error = 7.74 uT\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AMRZJ4X1lRSt"
      },
      "source": [
        "## Run this block to save your data to a json file\n",
        "This stores the experimental parameters you entered and the fitting results (but NOT the raw magnetometer data) to a single text file in json format. \n",
        "\n",
        "**you should copy this file to your individual github repository AND to the shared class repository**\n",
        "\n",
        "1. open the file explorer to the left, click on the dots next to the file name and download to the local computer\n",
        "2. copy the file into the local github repository location, then use github desktop to sync OR use the web interface to upload directly\n",
        "3. use the web interface to upload the same file to the class repository - don't forget to enter a commit message and save. Note that your commit messages will be publicly visible to the world, so don't include your name or any naughty words.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7B8LIoN_3A6y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d7941a5d-d45c-4033-8ade-7d2cbcd4a94a"
      },
      "source": [
        "fits = []\n",
        "for e in experiments:\n",
        "  fits.append({\"anglePath\":e.anglePath, \"magPath\":e.magPath, \"offset\":e.offset.tolist(), \"tiltAngle\":e.tiltAngle, \"L\":e.fixedParams.L, \"B0\":e.fixedParams.B0, \"t\":e.tcross.tolist(), \"orbit\":e.orbitParameters.tolist()})\n",
        "results = {\"setupNumber\":setupNumber, \"section\":section, \"thetaWall\":np.deg2rad(angleOfWall), \"z0\":z0, \"fits\":fits}\n",
        "outputname = 'section{:d}setup{:d}-{}.json'.format(int(section), int(setupNumber), date)\n",
        "file = open(outputname, 'w')\n",
        "json.dump(results, file)\n",
        "file.close()\n",
        "\n",
        "print('data saved in {} - BE SURE TO COPY TO YOUR GITHUB'.format(outputname))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "data saved in section3setup2-16-Nov-2021.json - BE SURE TO COPY TO YOUR GITHUB\n"
          ]
        }
      ]
    }
  ]
}